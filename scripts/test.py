# Can we simplify chords definitions?


typesLst = {
    # Major
    '': '1-3-5',
    'M6': '1-3-5-6',
    '6': '1-3-5-6',
    '6/9': '1-3-5-6-4',
    'M7': '1-3-5-7',
    'M7#5': '1-3-#5-7',
    'M9': '1-3-5-7-2',
    'M9(no7)': '1-3-5-2',
    'M(add9)': '1-3-5-2',
    'M11': '1-3-5-7-2-4',

    # Minor
    'm': '1-b3-5',
    'm6': '1-b3-5-6',
    'm7': '1-b3-5-b7',
    'm9': '1-b3-5-b7-2',
    'm9(no7)': '1-b3-5-2',
    'm7b9': '1-b3-5-b7-b2',
    'm7b5b9': '1-b3-b5-b7-b2',
    'm11': '1-b3-5-b7-2-4',

    # Dominant
    '7': '1-3-5-b7',
    '7+5': '1-3-#5-b7',
    '7#5': '1-3-#5-b7',
    '9': '1-3-5-b7-2',
    '7b9': '1-3-5-b7-b2',
    '11': '1-3-5-b7-2-4',
    '11(no7)': '1-3-5-2-4',
    '11(no7,no9)': '1-3-5-4',
    '11(no9)': '1-3-5-b7-4',
    '13': '1-3-5-b7-2-4-6',
    '13(no7)': '1-3-5-2-4-6',  # todo ugly
    '13(no9)': '1-3-5-b7-4-6',
    '13(no11)': '1-3-5-b7-2-6',
    '13(no7no9)': '1-3-5-4-6',
    '13(no7no11)': '1-3-5-2-6',
    '13(no9no11)': '1-3-5-b7-2-4-6',

    # diminished
    'o': '1-b3-b5',
    'o7': '1-b3-b5-6',  # bb7->6
    'dim': '1-b3-b5',
    'dim7': '1-b3-b5-6',  # bb7->6
    'ø': '1-b3-b5-b7',
    'hdim': '1-b3-b5-b7',
    'm7b5': '1-b3-b5-b7',
    # augmented
    'aug': '1-3-#5',
    '+': '1-3-#5',
    # sus
    'sus4': '1-4-5',
    'sus2': '1-2-5',
    '7sus4': '1-4-5-b7',
    '7sus2': '1-2-5-b7',
    '9sus4': '1-4-5-b7-2',
    '9sus2': '1-2-5-b7-2',
    # misc:
    '5': '1-3',
}

# chrRegex = re.compile(r"([A-Ga-gXx]+)([#b♭♯]*)"+3*r"([(),]?no[0-9]+|\(?,?add[0-9]+\)?,?|maj|min|m|M|aug|dim|hdim|sus|o|ø|[/]*[#b♭♯+-]*\d*[0-9]*)")
# def findChords(chrStr):
#     return [s for s in re.findall(chrRegex , chrStr.replace('(','').replace(')','').replace('.',''))[0] if len(s)]

intStr = ['1', 'b2', '2', 'b3', '3', '4', 'b5', '5', '#5', '6', 'b7', '7', '8', 'b9', '9', '#9', '10', '11', '#11', '12', '#12', '13']

intervals={
    '1': [0],
    '5': [0, 7],

    'm': [0, 3, 7],
    'm6': [0, 3, 7, 9],
    'm7': [0, 3, 7, 10],
    'm9': [0, 3, 7, 10, 14],
    'm11': [0, 3, 7, 10, 14, 17],
    'm11+': [0, 3, 7, 10, 14, 18],
    'm6*9': [0, 3, 7, 9, 14],
    'm13': [0, 3, 7, 10, 14, 17, 21],
    'm7-9': [0, 3, 7, 10, 13],
    'm+5': [0, 3, 8],
    'm7-5': [0, 3, 6, 10],
    'm7+5': [0, 3, 8, 10],
    'm7+5-9': [0, 3, 8, 10, 13],

    '+5': [0, 4, 8],
    'major': [0, 4, 7],
    '6': [0, 4, 7, 9],
    '6*9': [0, 4, 7, 9, 14],
    '7': [0, 4, 7, 10],
    '7-5': [0, 4, 6, 10],
    '7-9': [0, 4, 7, 10, 13],
    '9': [0, 4, 7, 10, 14],
    '7-10': [0, 4, 7, 10, 15],
    '11': [0, 4, 7, 10, 14, 17],
    '11+': [0, 4, 7, 10, 14, 18],
    '13': [0, 4, 7, 10, 14, 17, 21],
    'maj7': [0, 4, 7, 11],
    'maj9': [0, 4, 7, 11, 14],
    'maj11': [0, 4, 7, 11, 14, 17],
    '7+5': [0, 4, 8, 10],
    '7+5-9': [0, 4, 8, 10, 13],

    '7sus4': [0, 5, 7, 10],
    '9sus4': [0, 5, 7, 10, 14],

    'dim': [0, 3, 6],
    '7sus2': [0, 2, 7, 10],
    'sus2': [0, 2, 7],
    'sus4': [0, 5, 7],
    '9+5': [0, 10, 13],
    'm9+5': [0, 10, 14],
}
for i in intervals:
    print('{}  {}'.format(i,','.join([intStr[j] for j in intervals[i]])))



